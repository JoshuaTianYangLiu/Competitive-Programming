/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package toosimple;

import java.util.*;
import java.io.*;

/**
 *
 * @author Joshua
 */


public class TooSimple {


    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws Exception{
        // TODO code application logic here
        List<Lee> h = new ArrayList<Lee>();
        h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());h.add(new Lee());
        char H = (char)h.size();
        List<Lee> E = new ArrayList<Lee>();
        E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());E.add(new Lee());
        char e = (char)E.size();
        List<Lee> L = new ArrayList<Lee>();
        L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());L.add(new Lee());
        char l =(char)L.size();
        List<Lee> O = new ArrayList<Lee>();
        O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());O.add(new Lee());
        char o = (char)O.size();
        List<Lee> COMMA = new ArrayList<Lee>();
        COMMA.add(new Lee());COMMA.add(new Lee());COMMA.add(new Lee());COMMA.add(new Lee());COMMA.add(new Lee());COMMA.add(new Lee());COMMA.add(new Lee());COMMA.add(new Lee());COMMA.add(new Lee());COMMA.add(new Lee());COMMA.add(new Lee());COMMA.add(new Lee());COMMA.add(new Lee());COMMA.add(new Lee());COMMA.add(new Lee());COMMA.add(new Lee());COMMA.add(new Lee());COMMA.add(new Lee());COMMA.add(new Lee());COMMA.add(new Lee());COMMA.add(new Lee());COMMA.add(new Lee());COMMA.add(new Lee());COMMA.add(new Lee());COMMA.add(new Lee());COMMA.add(new Lee());COMMA.add(new Lee());COMMA.add(new Lee());COMMA.add(new Lee());COMMA.add(new Lee());COMMA.add(new Lee());COMMA.add(new Lee());COMMA.add(new Lee());COMMA.add(new Lee());COMMA.add(new Lee());COMMA.add(new Lee());COMMA.add(new Lee());COMMA.add(new Lee());COMMA.add(new Lee());COMMA.add(new Lee());COMMA.add(new Lee());COMMA.add(new Lee());COMMA.add(new Lee());COMMA.add(new Lee());
        char comma = (char)COMMA.size();
        List<Lee> SPACE = new ArrayList<Lee>();
        SPACE.add(new Lee());SPACE.add(new Lee());SPACE.add(new Lee());SPACE.add(new Lee());SPACE.add(new Lee());SPACE.add(new Lee());SPACE.add(new Lee());SPACE.add(new Lee());SPACE.add(new Lee());SPACE.add(new Lee());SPACE.add(new Lee());SPACE.add(new Lee());SPACE.add(new Lee());SPACE.add(new Lee());SPACE.add(new Lee());SPACE.add(new Lee());SPACE.add(new Lee());SPACE.add(new Lee());SPACE.add(new Lee());SPACE.add(new Lee());SPACE.add(new Lee());SPACE.add(new Lee());SPACE.add(new Lee());SPACE.add(new Lee());SPACE.add(new Lee());SPACE.add(new Lee());SPACE.add(new Lee());SPACE.add(new Lee());SPACE.add(new Lee());SPACE.add(new Lee());SPACE.add(new Lee());SPACE.add(new Lee());
        char space = (char)SPACE.size();
        List<Lee> w = new ArrayList<Lee>();
        w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());w.add(new Lee());
        char W = (char)w.size();
        List<Lee> R = new ArrayList<Lee>();
        R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());R.add(new Lee());
        char r = (char)R.size();
        List<Lee> D = new ArrayList<Lee>();
        D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());D.add(new Lee());
        char d = (char)D.size();
        List<Lee> MARK = new ArrayList<Lee>();
        MARK.add(new Lee());MARK.add(new Lee());MARK.add(new Lee());MARK.add(new Lee());MARK.add(new Lee());MARK.add(new Lee());MARK.add(new Lee());MARK.add(new Lee());MARK.add(new Lee());MARK.add(new Lee());MARK.add(new Lee());MARK.add(new Lee());MARK.add(new Lee());MARK.add(new Lee());MARK.add(new Lee());MARK.add(new Lee());MARK.add(new Lee());MARK.add(new Lee());MARK.add(new Lee());MARK.add(new Lee());MARK.add(new Lee());MARK.add(new Lee());MARK.add(new Lee());MARK.add(new Lee());MARK.add(new Lee());MARK.add(new Lee());MARK.add(new Lee());MARK.add(new Lee());MARK.add(new Lee());MARK.add(new Lee());MARK.add(new Lee());MARK.add(new Lee());MARK.add(new Lee());
        char mark = (char)MARK.size();
        System.out.print(H);
        System.out.print(e);
        System.out.print(l);
        System.out.print(l);
        System.out.print(o);
        System.out.print(comma);
        System.out.print(space);
        System.out.print(W);
        System.out.print(o);
        System.out.print(r);
        System.out.print(l);
        System.out.print(d);
        System.out.println(mark);
        
    }
}
